(this["webpackJsonparthurdayton116.git.io"]=this["webpackJsonparthurdayton116.git.io"]||[]).push([[158],{168:function(e,t,a){"use strict";var n=a(107);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.mainBranch=t.daCodeBranch=t.rcb=t.mdxcraissue=t.rebasstoc=t.rebasshp=t.mdxig=t.mdxhp=t.spagh=t.htdi=t.cra=t.ghPages=void 0;var o=n(a(111)),s=n(a(0)),i=a(108),r=a(122);const l="https://docs.github.com/en/github/working-with-github-pages";t.ghPages=l;const c="https://create-react-app.dev/";t.cra=c;t.htdi="https://create-react-app.dev/docs/deployment#github-pages";const d="https://github.com/rafgraph/spa-github-pages";t.spagh=d;const h="https://mdxjs.com/";t.mdxhp=h;const m="https://mdxjs.com/getting-started#installation-guides";t.mdxig=m;t.rebasshp="https://rebassjs.org/";const u="https://mdxjs.com/getting-started#table-of-components";t.rebasstoc=u;const g="https://github.com/facebook/create-react-app/issues/5580";t.mdxcraissue=g;const p="https://github.com/rajinwonderland/react-code-blocks";t.rcb=p;const f="https://github.com/arthurdayton116/arthurdayton116.github.io/tree/daCode";t.daCodeBranch=f;const b="https://github.com/arthurdayton116/arthurdayton116.github.io/tree/main";t.mainBranch=b;t.default=e=>{let t=e.components;(0,o.default)(e,["components"]);return s.default.createElement(i.MDXTag,{name:"wrapper",components:t},s.default.createElement(i.MDXTag,{name:"h4",components:t}),s.default.createElement(i.MDXTag,{name:"h4",components:t},"The why"),s.default.createElement(i.MDXTag,{name:"p",components:t},"I bumped into docs on github talking about hosting static sites on ",s.default.createElement(r.Link,{href:l,target:"_blank"},"git hub pages")," or even creating a blog using Jekyll. I explored Jekyll and quickly realized I had no interest in learning Ruby just to create a blog site and wondered if I could do it with React (a technology I'm much more familiar with)."),s.default.createElement(i.MDXTag,{name:"h4",components:t},"The how"),s.default.createElement(i.MDXTag,{name:"p",components:t},"Turns out you can with a couple of caveats - first you will want to use a module called git hub pages - second you need to add in a little hack to make react router work.  So after searching around on the internet I found several helpful examples but ultimately realized that the fine folks who maintain the ",s.default.createElement(r.Link,{href:c,target:"_blank"},"create-react-app")," also tell you pretty much ",s.default.createElement(r.Link,{href:c,target:"_blank"},"how to do it"),"."),s.default.createElement(i.MDXTag,{name:"p",components:t},"The one not so obvious part is the hack you have to do to your index.html file and the 404.html page. This ",s.default.createElement(r.Link,{href:d,target:"_blank"},"page")," explains it well with the gist of it being you add the 404 page given to your public folder and add a redirect script to your index.html file. When git hub refuses to route it calls 404 with everything you need to route and your redirect script routes it.  It's then in the history and all is well next time you navigate to a menu item.  Seems to work fine so going with it."),s.default.createElement(i.MDXTag,{name:"p",components:t},"The next thing I wanted to do was use a combination of Markdown and React to I could have the freedom to write content in something as friendly as Markdown and still be able to use React for making stuff a little prettier and more functional.  No shortage on options but what seemed friendliest was ",s.default.createElement(r.Link,{href:h,target:"_blank"},"MDX")," and as it turns out they give you a scaffolding for your favorite framework ",s.default.createElement(r.Link,{href:m,target:"_blank"},"here"),". Ultimately what MDX does is compile your MDX into JSX (magical) and even allows you to substitute your own React components for certain ",s.default.createElement(r.Link,{href:u,target:"_blank"},"markdown tags"),". Towards that end the other thing I really like is being able to use ",s.default.createElement(r.Link,{href:"https://rebassjs.org/",target:"_blank"},"Rebass")," which essentially allows us to drop pre-styled React components right into our Markdown file (awesome!).  Lastly a code highlighting component brings it home.  I chose ",s.default.createElement(r.Link,{href:p,target:"_blank"},"this one")," and adopted their example."),s.default.createElement(i.MDXTag,{name:"h5",components:t},"Gotchas"),s.default.createElement(i.MDXTag,{name:"p",components:t},"So like all technology just when you think it's the greatest thing you have ever seen it let's you down a little."),s.default.createElement(i.MDXTag,{name:"ol",components:t},s.default.createElement(i.MDXTag,{name:"li",components:t,parentName:"ol"},"So first annoyance I ran into was hot reloading.  Apparently it doesn't watch for mdx files and k=making it act right is a ",s.default.createElement(r.Link,{href:g,target:"_blank"}," known issue"),".  I dropped some nodemon on it")),s.default.createElement(i.MDXTag,{name:"pre",components:t},s.default.createElement(i.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript",metaString:""}},"nodemon --watch src start\n")),s.default.createElement(i.MDXTag,{name:"p",components:t},"\xa0","\xa0","\xa0"," and with a little config in package.json"),s.default.createElement(i.MDXTag,{name:"pre",components:t},s.default.createElement(i.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-json",metaString:""}},'"nodemonConfig": {\n  "ignore": ["test/*", "docs/*"],\n  "delay": "2500",\n  "ext": "mdx"\n},\n')),s.default.createElement(i.MDXTag,{name:"p",components:t},"\xa0","\xa0","\xa0"," most of my annoyance is gone but the existing hot reload and nodemon may get in the occasional slap fight and browser cache will seek to do what it does to developers."),s.default.createElement(i.MDXTag,{name:"ol",components:t,props:{start:2}},s.default.createElement(i.MDXTag,{name:"li",components:t,parentName:"ol"},"Second was how to dynamically load blog content.  The importMDX function that is used to import my blog mdx files doesn't let me pass it a variable so all I could figure out to do was create a BlogMDX.js file where I import each blog file and use a switch statement to return the one I want.  Ultimately it's all statically compiled anyway so I figure it works for now until enlightenment is bestowed upon me.")),s.default.createElement(i.MDXTag,{name:"h4",components:t},"Bringing it all home"),s.default.createElement(i.MDXTag,{name:"p",components:t},"Ultimately I end up with two files I have to mainitain alongside by content files a data.json with essentially metadata about each blog post that I use to render my list of posts and then a BlogMDX.js file that imports each mdx and returns the proper one based on blog id.  I push all my code to the ",s.default.createElement(r.Link,{href:f,target:"_blank"},"daCode branch")," and then I let gh pages push the built code to the ",s.default.createElement(r.Link,{href:b,target:"_blank"},"main branch")," where it shows up as my github organization page."))}}}]);
//# sourceMappingURL=158.5bdfb743.chunk.js.map